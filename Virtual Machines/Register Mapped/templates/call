    mov {s[0]}, rsi
    lodsw
    add {s[0]}, rax ;s[0] location of function
    mov {s[1]}, [{s[0]}] ;s[1] size of new local space
    add {s[1]}, 11 ; registers_saved + desc_and_flags
    shl {s[1]}, 4
    mov rdi, {s[1]}
    push {s[0]}
    pushq
    call malloc
    popq
    pop {s[0]}
    mov [rax+0x00], {r[1]}
    mov [rax+0x08], {r[2]}
    mov [rax+0x10], {r[3]}
    mov [rax+0x18], {r[4]}
    mov [rax+0x20], {r[1]}
    mov [rax+0x28], {r[2]}
    mov [rax+0x30], {r[3]}
    mov [rax+0x38], {r[4]}
    mov [rax+0x40], rsi
    mov [rax+0x48], rbp
    mov {s[1]}, {s[0]}
    add {s[1]}, 8 ;s[1] ptr to TD
    and {s[1]}, ~1111b
    or {s[1]}, 2 ; Object flag, S is now an object header
    mov [rax+0x50], {s[1]}
    mov {s[1]}, rsi ;s[1] storing old pc
    mov rdi, rax ; rdi location of new frame
    add rdi, 0x58 
    lodsw
    mov rsi, rax ; s[2] first local to send
    lodsw ; rax is the count of locals
    .loop:
        and rax, rax
        jz .loop_end
        movq
        dec rax        
    .loop_end:
    mov rbp, rdi
    sub rbp, 0x8
    mov rsi, {s[0]}
    add rsi, 0xa ;skip headers
    
    
    
    